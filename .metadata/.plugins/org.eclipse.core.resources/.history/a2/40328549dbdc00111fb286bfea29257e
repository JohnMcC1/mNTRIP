package com.mntripclient;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import com.example.android.BluetoothChat.BluetoothChat;

import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.util.Log;

class ConnectThread extends Thread {
	private final BluetoothSocket mmSocket;
	private final BluetoothDevice mmDevice;

	public ConnectThread(BluetoothDevice device) {
		BluetoothSocket tmp = null;
		mmDevice = device;


		try {
			tmp = mmDevice.createRfcommSocketToServiceRecord(mNTRIPBluetoothTask.MY_UUID);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		mmSocket = tmp;
	}

	public void run() {

		try {
			mmSocket.connect();
		} catch (IOException connectException) {
			Log.e("DUPA",  connectException.getMessage());
			try {
				mmSocket.close();
			} catch (IOException closeException) {
			}
			return;
		}

		manageConnectedSocket(mmSocket);
	}

	private void manageConnectedSocket(BluetoothSocket mmSocket2) {
		try {
			byte[] buffer = {'1', '2', '3', '4', '5', '1', '2', '3', '4', '5'};
			mmSocket2.getOutputStream().write(buffer, 0, 10);
			Log.e("DUPA",  "asdasd");
			
		} catch (IOException e) {
			e.printStackTrace();
			Log.e("DUPA", e.getMessage());
		}
		
	}

	public void cancel() {
		try {
			mmSocket.close();
		} catch (IOException e) {
		}
	}
	
	private class ConnectedThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;

        public ConnectedThread(BluetoothSocket socket, String socketType) {
            Log.d(TAG, "create ConnectedThread: " + socketType);
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;

            // Get the BluetoothSocket input and output streams
            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) {
                Log.e(TAG, "temp sockets not created", e);
            }

            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }

        public void run() {
            Log.i(TAG, "BEGIN mConnectedThread");
            byte[] buffer = new byte[1024];
            int bytes;

            // Keep listening to the InputStream while connected
            while (true) {
                try {
                    // Read from the InputStream
                    bytes = mmInStream.read(buffer);

                    // Send the obtained bytes to the UI Activity
                    mHandler.obtainMessage(BluetoothChat.MESSAGE_READ, bytes, -1, buffer)
                            .sendToTarget();
                } catch (IOException e) {
                    Log.e(TAG, "disconnected", e);
                    connectionLost();
                    break;
                }
            }
        }

        /**
         * Write to the connected OutStream.
         * @param buffer  The bytes to write
         */
        public void write(byte[] buffer) {
            try {
                mmOutStream.write(buffer);

                // Share the sent message back to the UI Activity
                mHandler.obtainMessage(BluetoothChat.MESSAGE_WRITE, -1, -1, buffer)
                        .sendToTarget();
            } catch (IOException e) {
                Log.e(TAG, "Exception during write", e);
            }
        }

        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of connect socket failed", e);
            }
        }
    }
	
}